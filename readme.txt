on average the custom, unbalanced tree map performed approximately 249% worse (efficiency measures in ns) than java's native tree map class in
counting, or measuring the freqeuency of, words in 77 text files. In particular file instances the efficiency difference was small favoring java's class (< 1%), while
in other instances the efficiency difference was more pronounced (>800%). In no instances did the unbalanced tree map out perform the native java tree map class.

Upon further examination, java's documentation reveals that its TreeMap class is a Red-Black Tree, critically a self-balancing tree which maintains O(Logn) height
after node insertion or deletion (no deletions performed in this analysis), whereas an unbalanced tree map evidently does not. Indeed, the particularly large discrepancies
in efficiency observed here may be assumed to have evolved from word patterns which led to the generation of unbalanced trees, and thus increasingly large search and insertion times,
provided no corrective actions were taken to balance the tree otherwise. The unbalanced tree map class thus exceeded the upper bound of O(Logn) which favors balanced tree classes. This assigment
exemplifies potential efficiency gains in search and insert operations from using balanced tree classes over unbalanced ones, though there likely exist more efficient implementations of
the unbalanced tree class than provided in this example, this observation is fundamental.

raw console output are provided below:

1,11717300 // unbalanced tree map begin
2,13422300
3,15832900
4,25635100
5,28383600
6,34925000
7,40444600
8,42688100
9,44369100
10,48501500
11,56657700
12,57939600
13,59523500
14,61455300
15,63315800
16,64262900
17,66028500
18,68317600
19,69968900
20,70734400
21,73139700
22,74349200
23,76704700
24,80492300
25,82543400
26,88516500
27,90147300
28,92099000
29,94805600
30,96471300
31,99763200
32,108038800
33,111139500
34,111708000
35,112368300
36,113430700
37,114397400
38,116208200
39,119692000
40,120239900
41,122377100
42,123247200
43,126355000
44,128542400
45,131265500
46,132293400
47,136996900
48,139081700
49,139950400
50,141604700
51,147325200
52,148519300
53,153195900
54,158242900
55,159156200
56,160445300
57,165468300
58,168014700
59,169158900
60,171960100
61,173403100
62,176243600
63,177416700
64,179439200
65,180763700
66,183135700
67,185772800
68,187535000
69,189790300
70,191783700
71,194476900
72,196066200
73,200424400
74,203446500
75,204303800
76,208022800
77,209062600
1,2583600 // java tree map begin
2,3430600
3,4657000
4,10453500
5,11639700
6,15342900
7,18987900
8,20758900
9,22858500
10,25723900
11,34749100
12,35334800
13,36081400
14,37240800
15,38531100
16,39536700
17,40795000
18,41766100
19,42628800
20,43132100
21,44967900
22,45556800
23,47109200
24,49002000
25,50320300
26,53009600
27,54891100
28,56702800
29,59215600
30,60367000
31,63315100
32,70953300
33,73484800
34,73975100
35,74593900
36,75621000
37,76718900
38,78136800
39,81481100
40,82032300
41,83769100
42,84535800
43,87594400
44,89805000
45,92201100
46,92970100
47,96154300
48,97342100
49,97954400
50,99491100
51,103492900
52,104260300
53,107143800
54,110486400
55,111221300
56,112263800
57,116598000
58,118717300
59,119625800
60,121929800
61,123135500
62,125144000
63,126155500
64,127637500
65,128545400
66,130149900
67,132370000
68,133704100
69,134920200
70,136068700
71,138302600
72,139642500
73,142697100
74,144736000
75,145467000
76,148491100
77,149278800